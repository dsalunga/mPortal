@using WCMS.Common.Utilities
@using WCMS.Framework
@using WCMS.Framework.Core.Shared
@using WCMS.WebSystem
@using WCMS.WebSystem.Apps.BranchLocator
@{
    var query = new WQuery(this);
    IEnumerable<MChapter> chapters = null;
    var loggedIn = WSession.Current.IsLoggedIn;
    var isAdmin = WSession.Current.IsAdministrator;
    var keyword = query.Get("search");
    var chapterType = (int)ChapterTypes.Regular;
    double lat = 0;
    double lng = 0;

    if (!string.IsNullOrEmpty(keyword))
    {
        chapters = from i in MChapter.Provider.GetList()
                   where
                    FALHelper.IsAllowed(i, loggedIn, isAdmin)
                   && (DataHelper.HasMatch(i.Name, keyword)
                    || DataHelper.HasMatch(i.Address, keyword)
                    || DataHelper.HasMatch(i.Email, keyword)
                    || DataHelper.HasMatch(i.Telephone, keyword)
                    || DataHelper.HasMatch(i.MoreInfo, keyword))
                    && i.ChapterType == chapterType
                   select i;

        var lat2 = query.Get("lat");
        var lng2 = query.Get("lng");

        if (!string.IsNullOrEmpty(lat2))
        {
            lat = DataHelper.GetDouble(lat2);
        }

        if (!string.IsNullOrEmpty(lng2))
        {
            lng = DataHelper.GetDouble(lng2);
        }
    }
}
<link href="@WebUtil.Version("~/content/parts/branchlocator/assets/css/fal.min.css")" type="text/css" rel="stylesheet" />
@Html.Hidden("lat", lat)
@Html.Hidden("lng", lng)
@Html.Hidden("zoom", 15)
<div class="container">
    <h1 class="page-header">Search</h1>
    @Html.Raw(FALHelper.BuildBreadcrumb(query, -1))
    <br />
    <br />
    <div class="map-overlay" onclick="style.display = 'none'"><div>Click or touch map to activate</div></div>
    <div id="mapContainer" class="map-container"></div>
    <hr />
    <div class="row">
        <div class="col-lg-8">
            <div class="row">
                <div class="col-lg-6 col-md-6 col-sm-6">
                    <form class="form-search" method="get" action="@query">
                        <input type="hidden" name="open" value="search" />
                        @Html.Hidden("lat", lat)
                        @Html.Hidden("lng", lng)
                        <div class="input-group">
                            <input id="txtSearch" name="search" type="text" class="search-query form-control" placeholder="What locale are you searching?" value="@keyword">
                            <span class="input-group-btn">
                                <button type="submit" class="btn btn-default">Search</button>
                            </span>
                        </div>
                    </form>
                </div>
            </div>
            <h3>Search Results</h3>
            @*<div>
            <span class="glyphicon glyphicon-map-marker"></span> Your location: <span id="currentLocation"></span>
            </div>
            <br />*@
            <form id="frmDashboard" method="post">
                @*@Html.Hidden("hfLat", lat)
                @Html.Hidden("hfLng", lng)*@

                @if (chapters != null && chapters.Count() > 0)
                {
                    foreach (var item in chapters)
                    {
                        query.Set(WConstants.Open, "details");
                        var distanceKM = FALHelper.GetCoordinatesDistance(lat, lng, item.Latitude, item.Longitude) * 0.001;
                        var distanceMI = distanceKM * 0.621371;
                        <div>
                            <div class="alert alert-info chapter-title-block" id="nearbyName">
                                <a href="@query.Set("id", item.Id)">@item.Name</a>
                                <span class="label label-default pull-right">@string.Format("{0:N2}", distanceKM) km @*<span class="text-muted2">|</span> @string.Format("{0:N2}", distanceMI) mi*@></span>
                            </div>
                            @if (!string.IsNullOrEmpty(item.Address))
                            {
                                <p>
                                    <span class="glyphicon glyphicon-map-marker"></span> Address: @item.Address
                                </p>
                            }
                            @if (!string.IsNullOrEmpty(item.Mobile))
                            {
                                <p>
                                    <span class="glyphicon glyphicon-phone"></span> Mobile: @item.Mobile
                                </p>
                            }
                            @if (!string.IsNullOrEmpty(item.Telephone))
                            {
                                <p><span class="glyphicon glyphicon-earphone"></span> Telephone: @item.Telephone</p>
                            }
                            @if (!string.IsNullOrEmpty(item.Email))
                            {
                                <p><span class="glyphicon glyphicon-envelope"></span> Email: @item.Email</p>
                            }
                            <br />
                        </div>
                    }
                }
                else
                {
                    <button id="btnFindNearLocales" class="btn btn-primary" disabled="disabled">Find Nearest Locales</button>
                }
            </form>
        </div>
    </div>
</div>
<script src="//maps.googleapis.com/maps/api/js?v=3.exp&sensor=false"></script>
<script src="@WebUtil.Version("~/content/parts/branchlocator/assets/js/fal.min.js")"></script>
<script type="text/javascript">
    function initialize() {
        var lat = $('#lat').val();
        var lng = $('#lng').val();
        var myLatlng = new google.maps.LatLng(lat, lng);
        var mapOptions = {
            zoom: parseInt($('#zoom').val()),
            center: myLatlng,
            mapTypeId: google.maps.MapTypeId.ROADMAP
        }
        var map = new google.maps.Map(document.getElementById('mapContainer'), mapOptions);
        var bounds = new google.maps.LatLngBounds();
        @if (chapters != null && chapters.Count() > 0)
        {
            foreach (var item in chapters)
            {
                if (!(item.Latitude == 0 && item.Longitude == 0))
                {
                    var address = string.IsNullOrEmpty(item.Address) ? "Please contact the assigned coordinator." : item.Address;
                    query.Set(WConstants.Open, "details");
                    <text>
                    latLng = new google.maps.LatLng('@item.Latitude', '@item.Longitude');
                    setMapMarker(map, latLng, false, '@item.Name', buildInfoWindow('@item.Name', "@Html.Raw(RazorHelper.FormatJsString(address))", '@query.Set("id", item.Id)'));
                    bounds.extend (latLng);
                    </text>
                }
            }

            <text>
            //  Fit these bounds to the map
            map.fitBounds(bounds);
            </text>
        }
    }
    google.maps.event.addDomListener(window, 'load', initialize);
</script>